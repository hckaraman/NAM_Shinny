downloadBttn(
outputId = "downloadData10",
style = "float",
color = "primary"
)
)
write.csv(mtcars, con)
output[[paste0("downloadData", i)]] <- downloadHandler(
filename = function() {
paste('data-', Sys.Date(), '.csv', sep='')
},
content = function(con) {
write.csv(mtcars, con)
}
)
shinyApp(ui, server)
for (i in 1:length(na_values)) {
if ( na_values[i][[1]] != 0) {
print( paste(names(na_values[i][1]) ," data has " ,na_values[i][[1]] ," na values" ))
}
}
for (i in 1:length(na_values)) {
if ( na_values[i][[1]] != 0) {
print( paste(names(na_values[i][1]) ," data has " ,na_values[i][[1]] ," na values" ))
}
}
if ( na_values[i][[1]] != 0) {
print( paste(names(na_values[i][1]) ," data has " ,na_values[i][[1]] ," na values" ))
}
if ( na_values[i][[1]] != 0) {
print( paste(names(na_values[i][1]) ," data has " ,na_values[i][[1]] ," na values" ))
}
for (i in 1:length(na_values)) {
if ( na_values[i][[1]] != 0) {
print( paste(names(na_values[i][1]) ," data has " ,na_values[i][[1]] ," na values" ))
}
}
sum(is.na(df))
mean(is.na(df))
Name <- c("John", "Tim", NA)
Sex <- c("men", NA, "women")
Age <- c(45, 53, NA)
dt <- data.frame(Name, Sex, Age)
dt
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
title = "Important message",
"This is an important message!",
easyClose = TRUE
))
})
}
)
observeEvent(input$show, {
showModal(modalDialog(
title = "Important message",
"This is an important message!",
easyClose = TRUE
))
})
runApp('test.R')
runApp('test.R')
showModal(modalDialog(
title = text,
easyClose = TRUE
))
runApp('test.R')
runApp('test.R')
showModal(modalDialog(
text,
easyClose = TRUE
))
runApp('test.R')
text()
text
runApp('test.R')
runApp('test.R')
runApp('test.R')
dialog_text
file <- './Data (copy)/Sukesen (copy).csv'
df <- vroom(file)
# Check NA values in the data
na_values <- colSums(is.na(df))
na_names <- names(df)
# temp <- data.frame(nam_)
for (i in 1:length(na_values)) {
if ( na_values[i][[1]] != 0) {
dialog_text <- paste(names(na_values[i][1]) ," data has " ,na_values[i][[1]] ," na values" )
}
}
dialog_text
length(dialog_text)
runApp('test.R')
runApp()
at <- list()
aappend(at,"at")
append(at,"at")
at
at <- append(at,"at")
at
at <- append(at,"atÅŸar")
at
runApp('test.R')
library(vroom)
file <- './Data (copy)/Sukesen (copy).csv'
df <- vroom(file)
na_values <- colSums(is.na(df))
na_names <- names(df)
dialog_text <- list()
for (i in 1:length(na_values)) {
if ( na_values[i][[1]] != 0) {
dialog_text <- append(dialog_text,paste(names(na_values[i][1]) ," data has " ,na_values[i][[1]] ," na values" ))
}
}
dialog_text
library(vroom)
file <- './Data (copy)/Sukesen (copy).csv'
df <- vroom(file)
na_values <- colSums(is.na(df))
na_names <- names(df)
dialog_text <- list()
for (i in 1:length(na_values)) {
if ( na_values[i][[1]] != 0) {
dialog_text <- append(dialog_text,paste(names(na_values[i][1]) ," data has " ,na_values[i][[1]] ," na values" ))
}
}
dialog_text
ff <- "Temp  data has  7  na values"
f1 <- "Q  data has  15  na values"
paste(ff,f1)
paste(ff,f1 , sep="\")
)
asd
qwe""
""
paste(ff,f1)
paste(ff,f1 , sep="\n")
rbind(ff,f1)
dialog_text <- paste(dialog_text, "\n", paste(names(na_values[i][1]) ," data has " ,na_values[i][[1]] ," na values" ),sep="")
dialog_text
library(vroom)
file <- './Data (copy)/Sukesen (copy).csv'
df <- vroom(file)
na_values <- colSums(is.na(df))
na_names <- names(df)
dialog_text <- ""
for (i in 1:length(na_values)) {
if ( na_values[i][[1]] != 0) {
# dialog_text <- append(dialog_text,paste(names(na_values[i][1]) ," data has " ,na_values[i][[1]] ," na values" ))
dialog_text <- paste(dialog_text, "\n", paste(names(na_values[i][1]) ," data has " ,na_values[i][[1]] ," na values" ),sep="")
}
}
dialog_text
cat(dialog_text)
library(vroom)
file <- './Data (copy)/Sukesen (copy).csv'
df <- vroom(file)
na_values <- colSums(is.na(df))
na_names <- names(df)
dialog_text <- ""
for (i in 1:length(na_values)) {
if ( na_values[i][[1]] != 0) {
# dialog_text <- append(dialog_text,paste(names(na_values[i][1]) ," data has " ,na_values[i][[1]] ," na values" ))
dialog_text <- paste(dialog_text, "\n", paste(names(na_values[i][1]) ," data has " ,na_values[i][[1]] ," na values" ),sep="")
}
}
cat(dialog_text)
showModal(modalDialog(
cat(dialog_text)
))
runApp('test.R')
runApp('test.R')
runApp('test.R')
dialog_text
cat(data)
cat(dialog_text)
observeEvent(input$show, {
showModal(div(id="ModalDiv", modalDialog(
inputId = "distPlot",
title = HTML('<span style="color:#339fff; font-size: 20px; font-weight:bold; font-family:sans-serif ">Current data column<span>'),
br(),
plotOutput("distPlot"),
footer = tagList(actionButton("close", "OK")) )))
})
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(div(id="ModalDiv", modalDialog(
inputId = "distPlot",
title = HTML('<span style="color:#339fff; font-size: 20px; font-weight:bold; font-family:sans-serif ">Current data column<span>'),
br(),
plotOutput("distPlot"),
footer = tagList(actionButton("close", "OK")) )))
})
}
)
showModal(div(id="ModalDiv", modalDialog(
inputId = "distPlot",
title = HTML('<span style="color:#339fff; font-size: 20px; font-weight:bold; font-family:sans-serif ">Current data column<span>'),
br(),
footer = tagList(actionButton("close", "OK")) )))
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(div(id="ModalDiv", modalDialog(
inputId = "distPlot",
title = HTML('<span style="color:#339fff; font-size: 20px; font-weight:bold; font-family:sans-serif ">Current data column<span>'),
br(),
footer = tagList(actionButton("close", "OK")) )))
})
}
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(div(id="ModalDiv", modalDialog(
inputId = "distPlot",
title = HTML('<span style="color:#339fff; font-size: 20px; font-weight:bold; font-family:sans-serif ">Current data column<span>'),
br(),
footer = tagList(actionButton("close", "OK")) )))
})
}
)
showModal(div(id="ModalDiv", modalDialog(
inputId = "distPlot",
title = HTML('<span style="color:#339fff; font-size: 20px; font-weight:bold; font-family:sans-serif ">Current data column<span>'),
br(),
footer = tagList(actionButton("close", "OK")) )))
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(div(id="ModalDiv", modalDialog(
inputId = "distPlot",
title = HTML('<span style="color:#339fff; font-size: 20px; font-weight:bold; font-family:sans-serif ">Current data column<span>'),
br(),
footer = tagList(actionButton("close", "OK")) )))
})
}
)
if (interactive()) {
# Display an important message that can be dismissed only by clicking the
# dismiss button.
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
title = "Important message",
"This is an important message!"
))
})
}
)
# Display a message that can be dismissed by clicking outside the modal dialog,
# or by pressing Esc.
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
title = "Somewhat important message",
"This is a somewhat important message.",
easyClose = TRUE,
footer = NULL
))
})
}
)
# Display a modal that requires valid input before continuing.
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog"),
verbatimTextOutput("dataInfo")
),
server = function(input, output) {
# reactiveValues object for storing current data set.
vals <- reactiveValues(data = NULL)
# Return the UI for a modal dialog with data selection input. If 'failed' is
# TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("dataset", "Choose data set",
placeholder = 'Try "mtcars" or "abc"'
),
span('(Try the name of a valid data object like "mtcars", ',
'then a name of a non-existent object like "abc")'),
if (failed)
div(tags$b("Invalid name of data object", style = "color: red;")),
footer = tagList(
modalButton("Cancel"),
actionButton("ok", "OK")
)
)
}
# Show modal when button is clicked.
observeEvent(input$show, {
showModal(dataModal())
})
# When OK button is pressed, attempt to load the data set. If successful,
# remove the modal. If not show another modal, but this time with a failure
# message.
observeEvent(input$ok, {
# Check that data object exists and is data frame.
if (!is.null(input$dataset) && nzchar(input$dataset) &&
exists(input$dataset) && is.data.frame(get(input$dataset))) {
vals$data <- get(input$dataset)
removeModal()
} else {
showModal(dataModal(failed = TRUE))
}
})
# Display information about selected data
output$dataInfo <- renderPrint({
if (is.null(vals$data))
"No data selected"
else
summary(vals$data)
})
}
)
}
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
dialog_text
))
})
}
)
dialog_text
paste(cat(dialog_text))
t <- paste(cat(dialog_text))
t
HTML("This is the first line.<br>
This should be the second.")
# dialog_text <- append(dialog_text,paste(names(na_values[i][1]) ," data has " ,na_values[i][[1]] ," na values" ))
dialog_text <- paste(dialog_text, "<br>", paste(names(na_values[i][1]) ," data has " ,na_values[i][[1]] ," na values" ),sep="")
dialog_text
library(vroom)
file <- './Data (copy)/Sukesen (copy).csv'
df <- vroom(file)
na_values <- colSums(is.na(df))
na_names <- names(df)
dialog_text <- ""
for (i in 1:length(na_values)) {
if ( na_values[i][[1]] != 0) {
# dialog_text <- append(dialog_text,paste(names(na_values[i][1]) ," data has " ,na_values[i][[1]] ," na values" ))
dialog_text <- paste(dialog_text, "<br>", paste(names(na_values[i][1]) ," data has " ,na_values[i][[1]] ," na values" ),sep="")
}
}
dialog_text
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
dialog_text
))
})
}
)
showModal(modalDialog(
HTML(dialog_text)
))
observeEvent(input$show, {
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
HTML(dialog_text)
))
})
}
)
showModal(div(id="ModalDiv", modalDialog(
inputId = "distPlot",
title = HTML('<span style="color:#339fff; font-size: 20px; font-weight:bold; font-family:sans-serif ">Current data column<span>'),
br(),
plotOutput("distPlot"),
footer = tagList(actionButton("close", "OK")) )))
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
HTML(dialog_text)
))
})
}
)
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
HTML(dialog_text)
))
})
}
)
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
HTML(dialog_text)
))
})
}
library(shiny); runApp('test.R')
showModal(modalDialog(
HTML(dialog_text),
easyClose = TRUE
))
runApp()
runApp()
dialog_text <- ""
length(dialog_text)
dialog_text
dialog_text[1]
dialog_text[1]
length(dialog_text[1])
dialog_text[[1]]
length(dialog_text[[1]])
dialog_text <- "atlar"
length(dialog_text[[1]])
typeof(dialog_text)
nchar(dialog_text)
dialog_text <- ""
nchar(dialog_text)
df[is.na(df)<-0]
df
df[is.na(df)] <- 0
df
runApp()
runApp()
input$area,params,getwd(),filename,input$cal,input$method,input$objective,input$maxiter
input$area
params
getwd()
params
filename
input$cal
methodinput$
asd
methodinput
input$method
input$objective
input$maxiter
runApp()
runApp()
runApp('~/Desktop/NAM_Shinny')
runApp()
dialog_text
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinycssloaders")
library(shinycssloaders)
runApp()
runApp('~/Desktop/NAM_Shinny')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/NAM_Shinny')
runApp()
runApp()
runApp('~/Desktop/NAM_Shinny')
runApp('~/Desktop/NAM_Shinny')
